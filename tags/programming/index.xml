<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on ./gibson.sh --blog</title>
    <link>http://blog.gibson.sh/tags/programming/</link>
    <description>Recent content in Programming on ./gibson.sh --blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Mar 2025 05:08:20 +0200</lastBuildDate>
    <atom:link href="http://blog.gibson.sh/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to import a C/C&#43;&#43; project into Eclipse CDT</title>
      <link>http://blog.gibson.sh/2025/03/08/eclipse-cdt-setup/</link>
      <pubDate>Sat, 08 Mar 2025 05:08:20 +0200</pubDate>
      <guid>http://blog.gibson.sh/2025/03/08/eclipse-cdt-setup/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using the Eclipse IDE with its &amp;ldquo;CDT&amp;rdquo; C++ plugin (the &lt;em&gt;Eclipse IDE for C/C++ Developers&lt;/em&gt; package)&#xA;since forever, basically.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s generally great, but setting up a project can be a bit of a PITA if you haven&amp;rsquo;t read this&#xA;article, as it&amp;rsquo;s not exactly intuitive if you want it to actually work.&lt;br&gt;&#xA;&lt;em&gt;&amp;ldquo;Actually work&amp;rdquo; as in: Eclipses source parser/indexer actually finds all included headers and thus&#xA;&amp;ldquo;knows&amp;rdquo; about the functions and types they define, so IDE features like code navigation and&#xA;autocompletion can function.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Git Gui</title>
      <link>http://blog.gibson.sh/2025/02/07/git-gui-introduction/</link>
      <pubDate>Fri, 07 Feb 2025 13:08:20 +0200</pubDate>
      <guid>http://blog.gibson.sh/2025/02/07/git-gui-introduction/</guid>
      <description>&lt;p&gt;In my experience, &lt;code&gt;git gui&lt;/code&gt; is a very useful tool for committing changes to &lt;a href=&#34;https://en.wikipedia.org/wiki/Git&#34;&gt;Git&lt;/a&gt;.&lt;br&gt;&#xA;It makes it very easy to review your own changes before committing them, and only committing the&#xA;changes you actually want to commit, instead of all changes in a file.&lt;/p&gt;&#xA;&lt;p&gt;This helps avoid committing debug prints, temporary hacks used during debugging, TODO comments&#xA;of things you just implemented and other things that can otherwise easily be committed accidentally.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to create portable Linux binaries (even if you need a recent compiler)</title>
      <link>http://blog.gibson.sh/2017/11/26/creating-portable-linux-binaries/</link>
      <pubDate>Sun, 26 Nov 2017 23:12:23 +0200</pubDate>
      <guid>http://blog.gibson.sh/2017/11/26/creating-portable-linux-binaries/</guid>
      <description>&lt;p&gt;Creating application binaries for Linux that run on a wide range of distributions&#xA;is a bit tricky, as different distributions ship different versions of various&#xA;system libraries. These are usually backwards compatible, but not forwards&#xA;compatible, so programs linked against older versions of the libraries also&#xA;work with newer versions, but not (necessarily) the other way around.&lt;br&gt;&#xA;So you want to link your application against older versions of those libs;&#xA;however, especially when using C++11 or newer, this is not always feasible.&lt;/p&gt;&#xA;&lt;p&gt;This post will show how to deal with these issues. It has a focus on videogames,&#xA;but the general ideas apply to other kinds of applications as well (with normal GUI&#xA;applications you may have more or more complex dependencies like Qt which may need&#xA;extra care that is not detailed here).&lt;/p&gt;&#xA;&lt;p&gt;I also somehow ended up writing a short introduction into dynamic libraries and&#xA;symbol versioning on Linux (last section of the article).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing Performance: stb_image vs libjpeg(-turbo), libpng and lodepng</title>
      <link>http://blog.gibson.sh/2015/03/23/comparing-performance-stb_image-vs-libjpeg-turbo-libpng-and-lodepng/</link>
      <pubDate>Mon, 23 Mar 2015 00:06:18 +0000</pubDate>
      <guid>http://blog.gibson.sh/2015/03/23/comparing-performance-stb_image-vs-libjpeg-turbo-libpng-and-lodepng/</guid>
      <description>&lt;p&gt;I recently tried out Sean Barrett&amp;rsquo;s &lt;a href=&#34;https://github.com/nothings/stb/blob/master/stb_image.h&#34;&gt;stb_image.h&lt;/a&gt;&#xA;and was blown away by how fucking easy it is to use.&lt;br&gt;&#xA;Integrating it into your project is trivial: Just add the header and somewhere do:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define STB_IMAGE_IMPLEMENTATION&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;stb_image.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s all. (If you wanna use it in multiple files you just &lt;code&gt;#include &amp;quot;stb_image.h&amp;quot;&lt;/code&gt; there without the &lt;code&gt;#define&lt;/code&gt;.)&lt;/p&gt;&#xA;&lt;p&gt;And the API is trivial too:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytesPerPixel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pixeldata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pixeldata2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;pixeldata&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stbi_load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bla.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesPerPixel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// if you have already read the image file data into a buffer:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pixeldata2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stbi_load_from_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bufferWithImageData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bufferLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                   &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesPerPixel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pixeldata2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Some error happened: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stbi_failure_reason&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s also a simple callback-API which allows you to define some callbacks that stb_image will call to get the data, handy if you&amp;rsquo;re using some kind of virtual filesystem or want to load the data from .zip files or something.&#xA;And it supports lots of common image file types including JPEG, PNG, TGA, BMP, GIF and PSD.&lt;/p&gt;&#xA;&lt;p&gt;So I wondered if there are any downsides regarding speed.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

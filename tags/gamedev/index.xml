<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gamedev on ./gibson.sh --blog</title>
    <link>http://blog.gibson.sh/tags/gamedev/</link>
    <description>Recent content in Gamedev on ./gibson.sh --blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 May 2023 02:30:20 +0200</lastBuildDate>
    <atom:link href="http://blog.gibson.sh/tags/gamedev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to set up a Linux server to host git with LFS behind a VPN</title>
      <link>http://blog.gibson.sh/2023/05/28/server-with-wireguard-and-forgejo/</link>
      <pubDate>Sun, 28 May 2023 02:30:20 +0200</pubDate>
      <guid>http://blog.gibson.sh/2023/05/28/server-with-wireguard-and-forgejo/</guid>
      <description>&lt;!-- # How to set up a Linux server to host git with LFS behind a VPN --&gt;&#xA;&lt;p&gt;This Howto explains how to set up a Linux server that runs &lt;a href=&#34;https://www.openssh.com/&#34;&gt;SSH&lt;/a&gt;,&#xA;&lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard VPN&lt;/a&gt;, &lt;a href=&#34;https://forgejo.org/&#34;&gt;Forgejo&lt;/a&gt; (a fork of&#xA;&lt;a href=&#34;https://gitea.io&#34;&gt;Gitea&lt;/a&gt;, a web-based git forge, kinda like self-hosted Github) behind a local&#xA;&lt;a href=&#34;https://nginx.org&#34;&gt;nginx&lt;/a&gt; reverse proxy and a minimal &lt;a href=&#34;https://thekelleys.org.uk/dnsmasq/doc.html&#34;&gt;DNS server&lt;/a&gt;&#xA;so we can have an internal domain for pretty URLs.&#xA;It also shows how to set up a &lt;a href=&#34;https://github.com/corecode/dma&#34;&gt;minimal MTA/mail forwarder&lt;/a&gt; so the&#xA;server can send mails, an &lt;a href=&#34;https://en.wikipedia.org/wiki/Iptables&#34;&gt;iptables&lt;/a&gt; +&#xA;&lt;a href=&#34;https://www.sshguard.net/&#34;&gt;SSHGuard&lt;/a&gt;-based firewall, automated backups and some basic self-monitoring.&#xA;As a bonus there&amp;rsquo;s a short section that outlines how to set up&#xA;&lt;a href=&#34;https://www.openproject.org/&#34;&gt;OpenProject&lt;/a&gt; in this environment.&lt;/p&gt;&#xA;&lt;p&gt;To follow this Howto &lt;strong&gt;you&amp;rsquo;ll need (very) basic Linux commandline knowledge&lt;/strong&gt;, i.e. you should be&#xA;able to navigate the file system in a terminal, use SSH and edit textfiles with a terminal-based&#xA;text editor (like nano, joe or vim, whatever you prefer).&lt;br&gt;&#xA;It will assume that you&amp;rsquo;re using &lt;strong&gt;Ubuntu Server 22.04&lt;/strong&gt;, but it should be the same for other&#xA;(systemd-using) Debian-based Linux distributions, and reasonably similar when using other distributions.&#xA;You&amp;rsquo;ll also need full &lt;strong&gt;root privileges&lt;/strong&gt; on the system.&lt;/p&gt;&#xA;&lt;p&gt;Hopefully this Howto is also useful if you only want to do some of these things (maybe set up&#xA;a public Forgejo instance, or just a Wireguard server without Forgejo on it).&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; There was a bug in the backup and monitoring scripts (shouldn&amp;rsquo;t have used&#xA;&lt;code&gt;bash_function | tee foolog.txt&lt;/code&gt;), so I updated them accordingly.&lt;/em&gt;&lt;br&gt;&#xA;&lt;strong&gt;UPDATE 2:&lt;/strong&gt; Added something about configuring&#xA;&lt;a href=&#34;#further-configuration-in-forgejos-appini&#34;&gt;&lt;code&gt;[git] HOME_PATH&lt;/code&gt; in Forgejo&amp;rsquo;s &lt;code&gt;app.ini&lt;/code&gt;&lt;/a&gt;, which works&#xA;around &lt;a href=&#34;https://codeberg.org/forgejo/forgejo/issues/869&#34;&gt;a Forgejo bug that prevents blobless clones&lt;/a&gt;.&lt;br&gt;&#xA;&lt;strong&gt;UPDATE 3:&lt;/strong&gt; Some small changes, and added a section about &lt;a href=&#34;#enforce-that-git-user-can-only-use-ssh-through-wireguard&#34;&gt;denying Git users SSH access unless they&amp;rsquo;re coming through the Wireguard VPN&lt;/a&gt;.&lt;br&gt;&#xA;&lt;strong&gt;UPDATE 4:&lt;/strong&gt; Replaced suggestion for using Hetzner with a &lt;a href=&#34;#fn:2&#34;&gt;warning about them&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to create portable Linux binaries (even if you need a recent compiler)</title>
      <link>http://blog.gibson.sh/2017/11/26/creating-portable-linux-binaries/</link>
      <pubDate>Sun, 26 Nov 2017 23:12:23 +0200</pubDate>
      <guid>http://blog.gibson.sh/2017/11/26/creating-portable-linux-binaries/</guid>
      <description>&lt;p&gt;Creating application binaries for Linux that run on a wide range of distributions&#xA;is a bit tricky, as different distributions ship different versions of various&#xA;system libraries. These are usually backwards compatible, but not forwards&#xA;compatible, so programs linked against older versions of the libraries also&#xA;work with newer versions, but not (necessarily) the other way around.&lt;br&gt;&#xA;So you want to link your application against older versions of those libs;&#xA;however, especially when using C++11 or newer, this is not always feasible.&lt;/p&gt;&#xA;&lt;p&gt;This post will show how to deal with these issues. It has a focus on videogames,&#xA;but the general ideas apply to other kinds of applications as well (with normal GUI&#xA;applications you may have more or more complex dependencies like Qt which may need&#xA;extra care that is not detailed here).&lt;/p&gt;&#xA;&lt;p&gt;I also somehow ended up writing a short introduction into dynamic libraries and&#xA;symbol versioning on Linux (last section of the article).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
